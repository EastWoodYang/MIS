ext {
    misPackageName = 'com.winwin.module.mis'
    sdkVersion = 25
    buildToolsVersion = null
    implementations = []
    importPreFix = []

    include_mis = { projectPath, rebuild ->
        include(projectPath)
        if (rebuild || !project(projectPath).projectDir.exists()) {
            def misApiFiles = []
            findMisApi(rootProject, misApiFiles)
            createMisApiModule(projectPath, misApiFiles)
        }
    }

}

def findMisApi(ProjectDescriptor project, misApiFiles) {
    if (project.children.size() == 0) {
        if (isMicroModule(project)) {
            project.projectDir.listFiles().each { microModuleDir ->
                if (!microModuleDir.isDirectory()) return
                // check [micro.properties] exists or not
                def microModulePropertiesFile = new File(microModuleDir.absolutePath + '\\micro.properties');
                if (!microModulePropertiesFile.exists()) return

                def javaResFile = new File(microModuleDir.absolutePath + "/src/main/mis")
                if (!javaResFile.exists()) return
                filterMisApi(javaResFile, misApiFiles)
            }
        } else {
            def javaResFile = new File(project.projectDir.absolutePath + "/src/main/mis")
            if (!javaResFile.exists()) return
            filterMisApi(javaResFile, misApiFiles)
        }
    } else {
        project.children.each { ProjectDescriptor childProject ->
            findMisApi(childProject, misApiFiles)
        }
    }
}

def filterMisApi(File file, misApiFiles) {
    if (file.isDirectory()) {
        file.listFiles().each { File childFile ->
            filterMisApi(childFile, misApiFiles)
        }
    } else {
        if (file.name.endsWith(".api")) {
            misApiFiles.add(file)
        }
    }
}

def isMicroModule(ProjectDescriptor project) {
    return new File(project.projectDir.absolutePath + "/main").exists()
}

def createMisApiModule(String projectPath, misApiFiles) {
    println '-'
    misApiFiles.each {
        println '-- ' + it
    }
    println '-\n'

    ProjectDescriptor misProject = project(projectPath)
    File projectDir = misProject.projectDir

    if (projectDir.exists()) {
        def javaPath = projectDir.absolutePath + "/src/main/java"
        new File(javaPath).deleteDir()
    }
    projectDir.mkdirs()

    createBuildGradle(projectDir.absolutePath + "/build.gradle")

    def srcMainPath = projectDir.absolutePath + "/src/main"
    new File(srcMainPath).mkdirs()

    createAndroidManifest(srcMainPath + "/AndroidManifest.xml", "com.winwin.module.mis")

    def javaResPath = srcMainPath + "/java"
    new File(javaResPath).mkdirs()

    def packagePath = javaResPath + '/' + ext.misPackageName.replace('.', '/')
    File packageFile = new File(packagePath)
    packageFile.mkdirs()

    misApiFiles.each { File file ->
        def line, text = ''
        file.withReader('UTF-8') { reader ->
            while ((line = reader.readLine()) != null) {
                if (line.contains('package ') && line.contains(';')) {
                    text += 'package ' + ext.misPackageName + ';\n'
                } else if (line.contains('import ') && line.contains(';')) {
                    text += filterMisApiImport(line)
                } else {
                    text += line + '\n'
                }
            }
        }
        def fileName = file.name.replace('.api', '.java')
        def dst = new File(packageFile, fileName)
        if (dst.exists()) dst.delete()

        dst.withWriter('UTF-8') {
            it.write text
        }
    }
}

def createBuildGradle(String filePath) {
    def template =
            "apply plugin: 'com.android.library'\n" +
            "\n" +
            "android {\n" +
            "    compileSdkVersion " + ext.sdkVersion + "\n"
    if (ext.buildToolsVersion != null) {
        template += "    buildToolsVersion '" + ext.buildToolsVersion + "'\n"

    }
    template +=
            "\n" +
            "    defaultConfig {\n" +
            "        minSdkVersion 14\n" +
            "        targetSdkVersion " + ext.sdkVersion + "\n" +
            "    }\n" +
            "}\n" +
            "\n" +
            "dependencies {\n"

    implementations.each {
        template += "    " + it.value + " '" + it.key + "'\n"
    }
    template += "}"

    def buildGradle = new File(filePath)
    if (!buildGradle.exists() || buildGradle.text != template) {
        println 'new build.gradle...'
        new File(filePath).write(template, 'utf-8')
    }
}

def createAndroidManifest(String filePath, String packageName) {
    def template =
            "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" +
            "\n" +
            "    package=\"" + packageName + "\">\n" +
            "\n" +
            "    <application\n" +
            "        android:allowBackup=\"true\"\n" +
            "        android:supportsRtl=\"true\">\n" +
            "\n" +
            "    </application>\n" +
            "\n" +
            "</manifest>"

    def androidManifest = new File(filePath)
    if (!androidManifest.exists() || androidManifest.text != template) {
        println 'new AndroidManifest...'
        androidManifest.write(template, 'utf-8')
    }
}

def filterMisApiImport(String text) {
    def ori = text;
    text = text.trim().replace('import', '').trim()
    for (int i = 0; i < ext.importPreFix.size(); i++) {
        if (text.startsWith(ext.importPreFix[i])) {
            return ori + '\n'
        }
    }
    return ''
}